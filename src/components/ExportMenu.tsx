import React, {useState} from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

interface Employee {
    id: string;
    name: string;
}

interface Shift {
    id: string;
    date: string;
    shiftType: string;
    employeeId: string;
}

interface ExportMenuProps {
    tableElement: HTMLElement | null;
    employees: Employee[];
    shifts: Shift[];
    calendarName: string;
    daysInMonth: Date[];
}

export const ExportMenu: React.FC<ExportMenuProps> = ({
                                                          tableElement,
                                                          employees,
                                                          shifts,
                                                          calendarName,
                                                          daysInMonth
                                                      }) => {
    const [isOpen, setIsOpen] = useState(false);

    const canExport = employees.length > 0 && daysInMonth.length > 0;

    if (!canExport) {
        return (
            <button
                disabled
                className="bg-gray-400 text-white px-4 py-2 rounded cursor-not-allowed flex items-center gap-2"
                title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
            >
                üì• –≠–∫—Å–ø–æ—Ä—Ç
            </button>
        );
    }

    return (
        <div className="relative">
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 flex items-center gap-2"
            >
                üì• –≠–∫—Å–ø–æ—Ä—Ç
                <span className={`transform transition-transform ${isOpen ? 'rotate-180' : ''}`}>
                    ‚ñº
                </span>
            </button>

            {isOpen && (
                <div
                    className="absolute top-full right-0 mt-1 bg-white border border-gray-300 rounded shadow-lg z-50 min-w-48">
                    <button
                        onClick={async () => {
                            if (!tableElement) {
                                alert('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                                return;
                            }
                            try {
                                const originalCursor = document.body.style.cursor;
                                document.body.style.cursor = 'wait';

                                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                const originalStyle = tableElement.style.cssText;
                                tableElement.style.background = 'white';
                                tableElement.style.width = 'fit-content';

                                const canvas = await html2canvas(tableElement, {
                                    scale: 1, // –£–º–µ–Ω—å—à–∞–µ–º scale –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                                    useCORS: true,
                                    scrollX: -window.scrollX,
                                    scrollY: -window.scrollY,
                                    width: tableElement.scrollWidth,
                                    height: tableElement.scrollHeight,
                                    backgroundColor: '#ffffff'
                                });

                                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
                                tableElement.style.cssText = originalStyle;

                                const link = document.createElement('a');
                                link.download = `${calendarName}_${new Date().toISOString().split('T')[0]}.png`;
                                link.href = canvas.toDataURL('image/png', 1.0); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                                link.click();

                                document.body.style.cursor = originalCursor;
                                setIsOpen(false);
                            } catch (error: any) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
                                document.body.style.cursor = 'auto';
                            }
                        }}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 border-b border-gray-200 flex items-center gap-2"
                    >
                        üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </button>
                    <button
                        onClick={() => {
                            if (employees.length === 0) {
                                alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
                                setIsOpen(false);
                                return;
                            }

                            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                            const headers = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', ...daysInMonth.map(day =>
                                `${day.getDate().toString().padStart(2, '0')}.${(day.getMonth() + 1).toString().padStart(2, '0')}`
                            )];

                            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                            const data = employees.map(employee => {
                                const row = [employee.name];

                                daysInMonth.forEach(day => {
                                    const shift = shifts.find(s =>
                                        s.employeeId === employee.id &&
                                        new Date(s.date).toDateString() === day.toDateString()
                                    );

                                    const shiftType = shift?.shiftType || 'NOT_WORKING';
                                    let shiftSymbol = '';

                                    switch (shiftType) {
                                        case 'DAY_SHIFT':
                                            shiftSymbol = '–î–µ–Ω—å';
                                            break;
                                        case 'NIGHT_SHIFT':
                                            shiftSymbol = '–ù–æ—á—å';
                                            break;
                                        case 'HOLIDAY':
                                            shiftSymbol = '–°—É—Ç–æ—á–Ω–∞—è';
                                            break;
                                        case 'LEAVE':
                                            shiftSymbol = '–û—Ç–ø—É—Å–∫';
                                            break;
                                        default:
                                            shiftSymbol = '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
                                    }

                                    row.push(shiftSymbol);
                                });

                                return row;
                            });

                            const csvContent = [
                                headers.join(';'),
                                ...data.map(row => row.map(cell => `"${cell}"`).join(';'))
                            ].join('\n');

                            const BOM = '\uFEFF';
                            const blob = new Blob([BOM + csvContent], {type: 'text/csv;charset=utf-8;'});
                            const link = document.createElement('a');
                            const url = URL.createObjectURL(blob);

                            link.setAttribute('href', url);
                            link.setAttribute('download', `${calendarName}_${new Date().toISOString().split('T')[0]}.csv`);
                            link.style.visibility = 'hidden';

                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            URL.revokeObjectURL(url);
                            setIsOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 border-b border-gray-200 flex items-center gap-2"
                    >
                        üìä Excel/CSV
                    </button>
                    <button
                        onClick={async () => {
                            if (!tableElement) {
                                alert('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                                return;
                            }
                            try {
                                const originalCursor = document.body.style.cursor;
                                document.body.style.cursor = 'wait';

                                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
                                const originalStyle = tableElement.style.cssText;
                                tableElement.style.background = 'white';
                                tableElement.style.width = 'fit-content';

                                const canvas = await html2canvas(tableElement, {
                                    scale: 1,
                                    useCORS: true,
                                    scrollX: -window.scrollX,
                                    scrollY: -window.scrollY,
                                    width: tableElement.scrollWidth,
                                    height: tableElement.scrollHeight,
                                    backgroundColor: '#ffffff'
                                });

                                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
                                tableElement.style.cssText = originalStyle;

                                const imgData = canvas.toDataURL('image/png', 1.0);
                                const pdf = new jsPDF({
                                    orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',
                                    unit: 'mm',
                                    format: 'a4'
                                });

                                const pageWidth = pdf.internal.pageSize.getWidth();
                                const pageHeight = pdf.internal.pageSize.getHeight();

                                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                pdf.setFontSize(16);
                                pdf.setFont('helvetica', 'bold');
                                pdf.text(calendarName, 10, 10);

                                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                const imgWidth = pageWidth - 20;
                                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                if (imgHeight <= pageHeight - 20) {
                                    pdf.addImage(imgData, 'PNG', 10, 15, imgWidth, imgHeight);
                                } else {
                                    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                                    let position = 15;
                                    let remainingHeight = imgHeight;

                                    pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                                    remainingHeight -= (pageHeight - position - 10);

                                    while (remainingHeight > 0) {
                                        pdf.addPage();
                                        position = -remainingHeight + 10;
                                        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                                        remainingHeight -= pageHeight;
                                    }
                                }

                                pdf.save(`${calendarName}_${new Date().toISOString().split('T')[0]}.pdf`);
                                document.body.style.cursor = originalCursor;
                                setIsOpen(false);
                            } catch (error: any) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF:', error);
                                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
                                document.body.style.cursor = 'auto';
                            }
                        }}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center gap-2"
                    >
                        üìÑ PDF
                    </button>
                </div>
            )}
        </div>
    );
};