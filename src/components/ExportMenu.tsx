import React, { useState } from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

interface Employee {
    id: string;
    name: string;
}

interface Shift {
    id: string;
    date: string;
    shiftType: string;
    employeeId: string;
}

interface ExportMenuProps {
    tableElement: HTMLElement | null;
    employees: Employee[];
    shifts: Shift[];
    calendarName: string;
    daysInMonth: Date[];
}

export const ExportMenu: React.FC<ExportMenuProps> = ({
                                                          tableElement,
                                                          employees,
                                                          shifts,
                                                          calendarName,
                                                          daysInMonth
                                                      }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [isExporting, setIsExporting] = useState(false);

    const exportToImage = async () => {
        if (!tableElement) {
            alert('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        if (isExporting) return;

        setIsExporting(true);
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            const originalStyles = {
                overflow: tableElement.style.overflow,
                transform: tableElement.style.transform,
                transformOrigin: tableElement.style.transformOrigin,
            };

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
            tableElement.style.overflow = 'visible';
            tableElement.style.transform = 'scale(1)';
            tableElement.style.transformOrigin = 'top left';

            // –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
            await new Promise(resolve => setTimeout(resolve, 100));

            const canvas = await html2canvas(tableElement, {
                scale: 0.8, // –£–º–µ–Ω—å—à–∞–µ–º scale –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
                useCORS: true,
                logging: false,
                backgroundColor: '#ffffff',
                removeContainer: true,
                width: tableElement.scrollWidth,
                height: tableElement.scrollHeight,
                onclone: (clonedDoc) => {
                    const clonedTable = clonedDoc.querySelector('table');
                    if (clonedTable) {
                        clonedTable.style.overflow = 'visible';
                        clonedTable.style.transform = 'scale(1)';
                    }
                }
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            Object.assign(tableElement.style, originalStyles);

            const link = document.createElement('a');
            link.download = `${calendarName}_${new Date().toISOString().split('T')[0]}.png`;
            link.href = canvas.toDataURL('image/png');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            setIsOpen(false);
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.');
        } finally {
            setIsExporting(false);
        }
    };

    const exportToPDF = async () => {
        if (!tableElement) {
            alert('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        if (isExporting) return;

        setIsExporting(true);
        try {
            const originalStyles = {
                overflow: tableElement.style.overflow,
                transform: tableElement.style.transform,
            };

            tableElement.style.overflow = 'visible';
            tableElement.style.transform = 'scale(1)';

            await new Promise(resolve => setTimeout(resolve, 100));

            const canvas = await html2canvas(tableElement, {
                scale: 0.7, // –ï—â–µ –º–µ–Ω—å—à–∏–π scale –¥–ª—è PDF
                useCORS: true,
                logging: false,
                backgroundColor: '#ffffff',
                width: tableElement.scrollWidth,
                height: tableElement.scrollHeight,
            });

            Object.assign(tableElement.style, originalStyles);

            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF({
                orientation: 'landscape',
                unit: 'mm',
                format: 'a3' // –ò—Å–ø–æ–ª—å–∑—É–µ–º A3 –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
            });

            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imgWidth = pageWidth - 20;
            const imgHeight = (canvas.height * imgWidth) / canvas.width;

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            pdf.setFontSize(14);
            pdf.text(calendarName, 10, 10);

            if (imgHeight <= pageHeight - 20) {
                pdf.addImage(imgData, 'PNG', 10, 15, imgWidth, imgHeight);
            } else {
                // –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–º–µ–Ω—å—à–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ
                const scaleFactor = (pageHeight - 20) / imgHeight;
                const scaledWidth = imgWidth * scaleFactor;
                const scaledHeight = imgHeight * scaleFactor;
                pdf.addImage(imgData, 'PNG', 10, 15, scaledWidth, scaledHeight);
            }

            pdf.save(`${calendarName}_${new Date().toISOString().split('T')[0]}.pdf`);
            setIsOpen(false);
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel.');
        } finally {
            setIsExporting(false);
        }
    };

    const exportToExcel = () => {
        if (employees.length === 0) {
            alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        try {
            const headers = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', ...daysInMonth.map(day =>
                `${day.getDate().toString().padStart(2, '0')}.${(day.getMonth() + 1).toString().padStart(2, '0')}`
            )];

            const data = employees.map(employee => {
                const row = [employee.name];

                daysInMonth.forEach(day => {
                    const shift = shifts.find(s =>
                        s.employeeId === employee.id &&
                        new Date(s.date).toDateString() === day.toDateString()
                    );

                    const shiftType = shift?.shiftType || 'NOT_WORKING';
                    let shiftSymbol = '';

                    switch (shiftType) {
                        case 'DAY_SHIFT': shiftSymbol = '–î'; break;
                        case 'NIGHT_SHIFT': shiftSymbol = '–ù'; break;
                        case 'HOLIDAY': shiftSymbol = '–°'; break;
                        case 'LEAVE': shiftSymbol = '–û'; break;
                        default: shiftSymbol = '-';
                    }

                    row.push(shiftSymbol);
                });

                return row;
            });

            const csvContent = [
                headers.join(','),
                ...data.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', `${calendarName}_${new Date().toISOString().split('T')[0]}.csv`);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            setIsOpen(false);
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel');
        }
    };

    return (
        <div className="relative">
            <button
                onClick={() => setIsOpen(!isOpen)}
                disabled={isExporting}
                className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 flex items-center gap-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
                {isExporting ? '‚è≥ –≠–∫—Å–ø–æ—Ä—Ç...' : 'üì• –≠–∫—Å–ø–æ—Ä—Ç'}
                <span className={`transform transition-transform ${isOpen ? 'rotate-180' : ''}`}>
                    ‚ñº
                </span>
            </button>

            {isOpen && (
                <div className="absolute top-full right-0 mt-1 bg-white border border-gray-300 rounded shadow-lg z-50 min-w-48">
                    <button
                        onClick={exportToImage}
                        disabled={isExporting}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 border-b border-gray-200 flex items-center gap-2 disabled:opacity-50"
                    >
                        üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </button>
                    <button
                        onClick={exportToPDF}
                        disabled={isExporting}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 border-b border-gray-200 flex items-center gap-2 disabled:opacity-50"
                    >
                        üìÑ PDF
                    </button>
                    <button
                        onClick={exportToExcel}
                        disabled={isExporting}
                        className="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center gap-2 disabled:opacity-50"
                    >
                        üìä Excel/CSV
                    </button>
                </div>
            )}
        </div>
    );
};